
class Solution {
 public static int getMaxArea(int arr[]) {
        int n = arr.length;
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;
        
        for (int i = 0; i <= n; i++) {
            // Consider height as 0 for easier right boundary handling
            int height = (i == n) ? 0 : arr[i];

            while (!stack.isEmpty() && height < arr[stack.peek()]) {
                int h = arr[stack.pop()];
                int leftBoundary = stack.isEmpty() ? -1 : stack.peek();
                int width = i - leftBoundary - 1;
                maxArea = Math.max(maxArea, h * width);
            }
            stack.push(i);
        }
        return maxArea;
    }
}
